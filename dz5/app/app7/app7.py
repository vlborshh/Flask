# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ7
# üìå –°–æ–∑–¥–∞—Ç—å RESTful API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ
# –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FastAPI –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
# ‚óã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á.
# ‚óã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ –ø–æ –µ—ë ID.
# ‚óã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏.
# ‚óã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ –ø–æ –µ—ë ID.
# ‚óã –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –µ—ë ID.
# üìå –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: ID (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ),
# –ù–∞–∑–≤–∞–Ω–∏–µ (—Å—Ç—Ä–æ–∫–∞), –û–ø–∏—Å–∞–Ω–∏–µ (—Å—Ç—Ä–æ–∫–∞), –°—Ç–∞—Ç—É—Å (—Å—Ç—Ä–æ–∫–∞): "todo", "in progress",
# "done".
# –ü–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ Python


import logging
from fastapi import FastAPI
from models import TaskBase, db1, Task, Base, engine

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

Base.metadata.create_all(bind=engine)

app7 = FastAPI()


@app7.get("/tasks/")
async def read_root():
    res = []
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å.')
    tasks = db1.query(TaskBase).all()
    for task in tasks:
        res.append(
            f"  task_id: {task.task_id}, title: {task.title}, "
            f"description: {task.description}, status: {task.status}  ")
    return res


@app7.get("/tasks/{task_id}")
async def read_root(task_id: int):
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å.')
    task = db1.query(TaskBase).filter(TaskBase.task_id == task_id).first()
    return f"Task:  task_id: {task.task_id}, title: " \
        f"{task.title}, description: {task.description}, status: {task.status}"


@app7.post("/tasks/{task_id}")
async def create_item(task_id: int, task: Task):
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª POST –∑–∞–ø—Ä–æ—Å.')
    tasks = db1.query(TaskBase).filter(TaskBase.task_id == task_id).all()
    for task in tasks:
        if task.task_id == task_id:
            return f'Task already exist!'
    else:
        new_item = TaskBase(task_id=task.task_id, title=task.title,
                            description=task.description, status=task.status,
                            is_del=False)
        db1.add(new_item)
        db1.commit()
        # tasks.append(item)
        return f'Task: {task}'


@app7.put("/tasks/{task_id}")
async def update_item(task_id: int, task_upd: Task):
    logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª PUT –∑–∞–ø—Ä–æ—Å –¥–ª—è task id = {task_id}.')
    task = db1.query(TaskBase).filter(TaskBase.task_id == task_id).first()
    task.title = task_upd.title
    task.description = task_upd.description
    task.status = task_upd.status
    db1.commit()
    return {"task_id": task_id, "task": task_upd}


@app7.delete("/tasks/{task_id}")
async def delete_item(task_id: int):
    logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª DELETE –∑–∞–ø—Ä–æ—Å –¥–ª—è task id = {task_id}.')
    tasks = db1.query(TaskBase).filter(TaskBase.task_id == task_id).all()
    for task in tasks:
        db1.delete(task)
        db1.commit()
    return {"task_id": task_id}
