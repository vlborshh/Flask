# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ6
# üìå –°–æ–∑–¥–∞—Ç—å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# –¥–æ–ª–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä Jinja –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è HTML
# —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å User —Å –ø–æ–ª—è–º–∏ id, name, email –∏ password.
# üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ users –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
# üìå –°–æ–∑–¥–∞–π—Ç–µ HTML —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –®–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω
# —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è
# –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–µ—Ç–æ–¥ GET).
# üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä Jinja.
# –ü–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ Python


from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
import logging
from fastapi import FastAPI, Request, Form
from starlette.responses import RedirectResponse
from starlette.staticfiles import StaticFiles
from werkzeug.security import generate_password_hash
from models import Users, UsersBase, Base, engine, db1

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

Base.metadata.create_all(bind=engine)

app6 = FastAPI()
templates = Jinja2Templates(directory="task6/templates/")
app6.mount("/static", StaticFiles(directory="app/app6/static"), name="static")


@app6.get("/users/", response_class=HTMLResponse)
async def read_root(request: Request):
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å.')
    users = db1.query(UsersBase).all()
    return templates.TemplateResponse('index.html',
                                      {"request": request, "users": users})


@app6.get("/postdata/")
async def root_redirect():
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å.')
    return RedirectResponse("/task6/users/")


@app6.get("/users/{user_id}")
async def read_root(user_id: int):
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å.')
    user = db1.query(UsersBase).filter(UsersBase.user_id == user_id).first()
    return f"User: user_id: {user.user_id}, " \
        f"name: {user.name}, email: {user.email}  "


@app6.post("/users/{user_id}")
async def create_item(user_id: int, user: Users):
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª POST –∑–∞–ø—Ä–æ—Å.')
    users = db1.query(UsersBase).filter(UsersBase.user_id == user_id).all()
    for user in users:
        if user.user_id == user_id:
            return f'Movie already exist!'
    else:
        password_hash = generate_password_hash(str(user.password))
        user = UsersBase(user_id=user_id, name=user.name,
                         email=user.email, password=password_hash, is_del=False)
        db1.add(user)
        db1.commit()
        return f"User: user_id: {user.user_id}, " \
            f"name: {user.name}, email: {user.email}  "


@app6.post("/users/")
async def create_user(user: Users):
    user_id = 1
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª POST –∑–∞–ø—Ä–æ—Å.')
    users = db1.query(UsersBase).all()
    if db1.query(UsersBase.user_id).first():
        for usr in users:
            if user_id == usr.user_id:
                user_id += 1
            else:
                break
        password_hash = generate_password_hash(str(user.password))
        new_user = UsersBase(user_id=user_id, name=user.name,
                             email=user.email, password=password_hash, is_del=False)
        db1.add(new_user)
        db1.commit()
        return f"User: user_id: {new_user.user_id}, " \
            f"name: {new_user.name}, email: {new_user.email}  "

    else:
        password_hash = generate_password_hash(str(user.password))
        new_user = UsersBase(user_id=user_id, name=user.name,
                             email=user.email, password=password_hash, is_del=False)
        db1.add(new_user)
        db1.commit()
        return f"User: user_id: {new_user.user_id}, " \
            f"name: {new_user.name}, email: {new_user.email}  "


@app6.post("/postdata/", response_class=HTMLResponse)
def postdata(request: Request, name=Form(), email=Form(), password=Form()):
    user_id = 1
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª POST –∑–∞–ø—Ä–æ—Å.')
    users = db1.query(UsersBase).all()
    if db1.query(UsersBase.user_id).first():
        for user in users:
            if user_id == user.user_id:
                user_id += 1
            else:
                break
        password_hash = generate_password_hash(str(password))
        new_user = UsersBase(user_id=user_id, name=name,
                             email=email, password=password_hash, is_del=False)
        db1.add(new_user)
        db1.commit()
        return templates.TemplateResponse('index.html',
                                          {"request": request, "users": users})

    else:
        password_hash = generate_password_hash(str(password))
        new_user = UsersBase(user_id=user_id, name=name,
                             email=email, password=password_hash, is_del=False)
        db1.add(new_user)
        db1.commit()
        return templates.TemplateResponse('index.html',
                                          {"request": request, "users": users})


@app6.put("/users/{user_id}")
async def update_item(user_id: int, user_upd: Users):
    logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª PUT –∑–∞–ø—Ä–æ—Å –¥–ª—è movie id = {user_id}.')
    user = db1.query(UsersBase).filter(UsersBase.user_id == user_id).first()
    user.name = user_upd.name
    user.email = user_upd.email
    user.password = user_upd.password
    db1.commit()
    return {"user_id": user_id, "user": user_upd}


@app6.delete("/users/{user_id}")
async def delete_item(user_id: int):
    logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª DELETE –∑–∞–ø—Ä–æ—Å –¥–ª—è movie id = {user_id}.')
    users = db1.query(UsersBase).filter(UsersBase.user_id == user_id).all()
    for user in users:
        db1.delete(user)
        db1.commit()
    return {"user_id": user_id}
