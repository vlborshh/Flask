# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
# üìå –°–æ–∑–¥–∞—Ç—å API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å POST –∑–∞–ø—Ä–æ—Å—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ–≥–æ
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å User —Å –ø–æ–ª—è–º–∏ id, name, email –∏ password.
# üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ users –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–µ—Ç–æ–¥ POST).
# üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞.

import logging
from fastapi import FastAPI
from models import Users, UsersBase, Base, engine, db1

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

Base.metadata.create_all(bind=engine)

app3 = FastAPI()


@app3.get("/users/")
async def read_root():
    res = []
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å.')
    users = db1.query(UsersBase).all()
    for user in users:
        res.append(f"  user_id: {user.user_id},"
                   f" name: {user.name}, email: {user.email}")
    return res


@app3.get("/users/{user_id}")
async def read_root(user_id: int):
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å.')
    user = db1.query(UsersBase).filter(UsersBase.user_id == user_id).first()
    return f"User: user_id: {user.user_id}, " \
        f"name: {user.name}, email: {user.email}  "


@app3.post("/users/{user_id}")
async def create_item(user_id: int, user: Users):
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª POST –∑–∞–ø—Ä–æ—Å.')
    users = db1.query(UsersBase).filter(UsersBase.user_id == user_id).all()
    for user in users:
        if user.user_id == user_id:
            return f'Movie already exist!'
    else:
        user = UsersBase(user_id=user.user_id, name=user.name,
                         email=user.email, password=user.password, is_del=False)
        db1.add(user)
        db1.commit()
        return f"User: user_id: {user.user_id}, " \
            f"name: {user.name}, email: {user.email}  "


@app3.put("/users/{user_id}")
async def update_item(user_id: int, user_upd: Users):
    logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª PUT –∑–∞–ø—Ä–æ—Å –¥–ª—è movie id = {user_id}.')
    user = db1.query(UsersBase).filter(UsersBase.user_id == user_id).first()
    user.name = user_upd.name
    user.email = user_upd.email
    user.password = user_upd.password
    db1.commit()
    return {"user_id": user_id, "user": user_upd}


@app3.delete("/users/{user_id}")
async def delete_item(user_id: int):
    logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª DELETE –∑–∞–ø—Ä–æ—Å –¥–ª—è movie id = {user_id}.')
    users = db1.query(UsersBase).filter(UsersBase.user_id == user_id).all()
    for user in users:
        db1.delete(user)
        db1.commit()
    return {"user_id": user_id}
